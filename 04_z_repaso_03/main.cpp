// Est√°s trabajando en un videojuego de aventura y necesitas un sistema de inventario que pueda manejar diferentes 
// tipos de objetos. Para asegurar que los datos est√©n bien organizados y evitar errores, usar√°s un enum para 
// clasificar los √≠tems. Tu tarea es:
// Crear una enum llamada TipoItem que defina las siguientes categor√≠as de √≠tems: Arma, Armadura, Pocion, y Gema. üíé
// Crear una clase base llamada Item que contenga un nombre (std::string), un precio (double), y el TipoItem del 
// objeto.
// Implementar dos clases hijas que hereden de Item:
// - Arma: Un arma tiene un da√±o (int). Su constructor debe inicializar el tipo de √≠tem a TipoItem::Arma.
// - Pocion: Una poci√≥n tiene una cantidad de curaci√≥n (int). Su constructor debe inicializar el tipo de √≠tem a
// TipoItem::Pocion.
// Crea un m√©todo virtual en la clase base Item llamado mostrarInformacion() que imprima los datos b√°sicos del 
// √≠tem (nombre, precio y tipo).
// Sobrescribe este m√©todo en las clases hijas para que impriman su informaci√≥n espec√≠fica (el da√±o en Arma o 
// la curaci√≥n en Pocion) adem√°s de la informaci√≥n b√°sica.
// En main, utiliza punteros a la clase base para instanciar objetos de las clases derivadas y luego llama 
// al m√©todo mostrarInformacion() a trav√©s de los punteros para demostrar el polimorfismo.
#include <iostream>

enum class TipoItem {
    Arma,
    Armadura,
    Pocion,
    Gema
};

class Item {
protected:
    std::string nombre;
    double precio;
    TipoItem tipo;

public:
    Item(const std::string& nombre, double precio, TipoItem tipo) : nombre(nombre), precio(precio), tipo(tipo) {}
    virtual ~Item() {}

    virtual void mostrarInformacion() {
        std::cout << "Nombre: " << nombre << std::endl;
        std::cout << "Precio: " << precio << std::endl;

    }
};

int main() {
    Item *i1 = new Item("nomrbre", 1.23, TipoItem::Gema);
    std::cout << "hello" ;
    return 0;
}
