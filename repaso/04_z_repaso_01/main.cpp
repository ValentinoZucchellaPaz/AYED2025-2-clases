// Est√°s desarrollando un nuevo videojuego de rol (RPG) y necesitas crear un sistema flexible para manejar
// las habilidades de los personajes. Todas las habilidades tienen un comportamiento b√°sico, pero cada tipo
// de habilidad tiene su propia forma de "activarse". Tu tarea es:
// Crear una clase base abstracta llamada Habilidad con las siguientes caracter√≠sticas:
// Un constructor que reciba el nombre de la habilidad.
// Un m√©todo virtual puro llamado activar() que no retorne nada. Este m√©todo ser√° la clave de la polimorfismo.
// Crear dos clases hijas que hereden de Habilidad:
// HechizoDeFuego: Esta habilidad quema al enemigo. Su m√©todo activar() debe imprimir un mensaje que diga algo
// como: "üî• Lanzas una bola de fuego, ¬°quemando al enemigo!".
// AtaqueFisico: Esta habilidad es un golpe cuerpo a cuerpo. Su m√©todo activar() debe imprimir un mensaje como:
// "‚öîÔ∏è Asestas un golpe contundente con tu espada, ¬°da√±ando al enemigo!".
// En la funci√≥n main, crea un puntero a la clase base (Habilidad*) y asigna din√°micamente objetos de las clases
// derivadas. Llama al m√©todo activar() a trav√©s del puntero para demostrar el comportamiento polim√≥rfico.
// El objetivo es que, sin importar a qu√© tipo de habilidad apunte el puntero, la llamada a activar()
// ejecute la implementaci√≥n correcta para esa clase espec√≠fica. üßô‚Äç‚ôÇÔ∏è

#include <iostream>
#include <string>
using namespace std;

class Habilidad
{
    string nombre;

public:
    // Habilidad(const string& nombre) : nombre(nombre) {}
    Habilidad(const string &nombre)
    {
        this->nombre = nombre;
    }
    virtual ~Habilidad() = default;   // Destructor virtual para permitir la limpieza adecuada de recursos
    virtual void activar() const = 0; // M√©todo virtual puro
};

class HechizoDeFuego : public Habilidad
{
public:
    HechizoDeFuego() : Habilidad("Hechizo de Fuego") {}
    void activar() const override
    {
        cout << "üî• Lanzas una bola de fuego, ¬°quemando al enemigo\n";
    }
};

class AtaqueFisico : public Habilidad
{
public:
    AtaqueFisico() : Habilidad("Ataque F√≠sico") {}
    void activar() const override
    {
        cout << "‚öîÔ∏è Asestas un golpe contundente con tu espada, ¬°da√±ando al enemigo!\n";
    }
};

int main()
{

    Habilidad *h1 = new HechizoDeFuego();
    Habilidad *h2 = new AtaqueFisico();

    h1->activar(); // Llamada al m√©todo activar() del hechizo de fuego
    h2->activar(); // Llamada al m√©todo activar() del ataque f√≠sico

    // Liberar memoria
    delete h1;
    delete h2;

    return 0;
}
